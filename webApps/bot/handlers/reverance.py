import asyncio
from pathlib import Path
from collections import defaultdict

from aiogram import Router, F, Bot
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    InputMediaPhoto
)
from aiogram.types.input_file import FSInputFile
from aiogram.methods import SendMessage
from aiogram.utils.i18n import gettext as _, lazy_gettext as __
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from core.container import Container

router = Router()


# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
class PhotoGenerationStates(StatesGroup):
    waiting_for_photos = State()
    choosing_style = State()


# --- –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–ª—å–±–æ–º–æ–≤ ---
media_group_cache = defaultdict(list)


keyboard_final = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ –°–ë–ü", callback_data="sbp")],
    [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="podderzhka")],
])


# --- /start ---
@router.message(F.text.in_([__("/start")]))
async def reverance(message: Message, container: Container, bot: Bot) -> None:
    sleep = 1

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=_("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 5 —Ñ–æ—Ç–æ - 450 —Ä—É–±"), callback_data="generate_5")],
        [InlineKeyboardButton(text=_("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 10 —Ñ–æ—Ç–æ - 850 —Ä—É–±"), callback_data="generate_10")],
    ])

    keyboard_start = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=_("–î–∞!"), callback_data="yes")],
    ])

    welcome_text = _(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ –≤ –¢–µ–ª–µ–≥—Ä–∞–º."
    )

    await bot(SendMessage(chat_id=message.chat.id, text=welcome_text))
    await asyncio.sleep(sleep)

    await bot(SendMessage(
        chat_id=message.chat.id,
        text=_(
            "–ó–∞–≥—Ä—É–∑–∏ –¥–æ 3 —Ñ–æ—Ç–æ, –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏ –ø–æ–ª—É—á–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é, "
            "–∫–æ—Ç–æ—Ä—É—é –Ω–µ –æ—Ç–ª–∏—á–∏—Ç—å –æ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–π.\n\n"
            "–ë–µ–∑ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Å—Ç—É–¥–∏—é –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞!\n"
            "10 —Å–Ω–∏–º–∫–æ–≤ ‚Äî 390 —Ä—É–±–ª–µ–π."
        )
    ))
    await asyncio.sleep(sleep)

    await bot(SendMessage(chat_id=message.chat.id, text=_("–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤:")))
    await asyncio.sleep(sleep)

    base_path = Path(__file__).parent.parent / "res"
    media_group = [
        InputMediaPhoto(media=FSInputFile(base_path / "p1.jpg")),
        InputMediaPhoto(media=FSInputFile(base_path / "p2.jpg")),
        InputMediaPhoto(media=FSInputFile(base_path / "p3.jpg")),
    ]
    await bot.send_media_group(chat_id=message.chat.id, media=media_group)

    await asyncio.sleep(sleep)

    await container.user_repository.update_state(
        id=message.from_user.id,
        state='examples'
    )
    await bot(
        SendMessage(
            chat_id=message.chat.id,
            text=_("–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é?"),
            reply_markup=keyboard_start
        )
    )



# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ "–î–∞!" ---
@router.callback_query(F.data == "yes")
async def handle_yes(callback: CallbackQuery, bot: Bot, container: Container, state: FSMContext):
    await callback.answer()
    await state.set_state(PhotoGenerationStates.waiting_for_photos)
    await bot.send_message(
        chat_id=callback.from_user.id,
        text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 3 —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ.\n–ö–æ–≥–¥–∞ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª."
    )
    await container.user_repository.update_state(
        id=callback.from_user.id,
        state='photos'
    )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ–æ—Ç–æ ---
@router.message(PhotoGenerationStates.waiting_for_photos, F.photo & ~F.media_group_id)
async def handle_single_photo(message: Message, container: Container, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    photos.append(message.photo[-1].file_id)

    if len(photos) >= 3:
        photos = photos[:3]
        await state.update_data(photos=photos)
        await state.set_state(PhotoGenerationStates.choosing_style)
        await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã.")
        await send_style_choices(message)
        await container.user_repository.update_state(
            id=message.from_user.id,
            state='style'
        )
    else:
        await state.update_data(photos=photos)
        msg = f"–ü—Ä–∏–Ω—è—Ç–æ {len(photos)} —Ñ–æ—Ç–æ."
        if len(photos) == 3:
            msg = "–ü—Ä–∏–Ω—è—Ç–æ 3 —Ñ–æ—Ç–æ."
        else:
            msg += " –ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª."
        await message.answer(msg)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞ (MediaGroup) ---
@router.message(PhotoGenerationStates.waiting_for_photos, F.media_group_id)
async def handle_media_group(message: Message, container: Container, state: FSMContext):
    media_group_cache[message.media_group_id].append(message.photo[-1].file_id)

    await asyncio.sleep(0.5)  # –ü–æ–¥–æ–∂–¥—ë–º –ø—Ä–∏—Ö–æ–¥–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
    photos = media_group_cache.pop(message.media_group_id, [])

    if not photos:
        return

    photos = photos[:3]
    await state.update_data(photos=photos)
    await state.set_state(PhotoGenerationStates.choosing_style)
    await message.answer("–ü—Ä–∏–Ω—è—Ç–æ 3 —Ñ–æ—Ç–æ.")
    await send_style_choices(message)
    await container.user_repository.update_state(
        id=message.from_user.id,
        state='style'
    )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ì–æ—Ç–æ–≤–æ" ---
@router.message(PhotoGenerationStates.waiting_for_photos, F.text.lower() == "–≥–æ—Ç–æ–≤–æ")
async def handle_done_photo_upload(message: Message, container: Container, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])

    if not photos:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ.")
        return

    await state.set_state(PhotoGenerationStates.choosing_style)
    await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã.")
    await send_style_choices(message)
    await container.user_repository.update_state(
        id=message.from_user.id,
        state='style'
    )


# --- –ö–Ω–æ–ø–∫–∏ —Å—Ç–∏–ª–µ–π ---
async def send_style_choices(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–§–æ—Ç–æ—Å—Ç—É–¥–∏—è", callback_data="style_studio")],
        [InlineKeyboardButton(text="–ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è —Å—ä–µ–º–∫–∞", callback_data="style_portrait")],
        [InlineKeyboardButton(text="–í –≥–æ—Ä–æ–¥–µ", callback_data="style_city")],
        [InlineKeyboardButton(text="–í –ø–∞—Ä–∫–µ", callback_data="style_park")],
        [InlineKeyboardButton(text="–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è", callback_data="style_creative")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏:", reply_markup=keyboard)



# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è ---
@router.callback_query(F.data.startswith("style_"))
async def handle_style_selected(callback: CallbackQuery, container: Container, state: FSMContext, bot: Bot):
    data = await state.get_data()
    if data.get("style") is not None:
        await callback.answer("–°—Ç–∏–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω.")
        return

    await callback.answer()
    style = callback.data.replace("style_", "")
    await state.update_data(style=style)

    await state.set_state(None)

    await container.user_repository.update_styles(id=callback.from_user.id, style=style)

    await bot.send_message(
        chat_id=callback.from_user.id,
        text=(
            f"–û—Ç–ª–∏—á–Ω–æ!\n\n"
            "–ú—ã –Ω–∞—á–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–π —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏.\n"
        ),
    )

    await container.user_repository.update_state(
        id=callback.from_user.id,
        state='waiting for sbp'
    )

    await asyncio.sleep(10)

    base_path = Path(__file__).parent.parent / "res"
    photo = FSInputFile(base_path / "p4.jpg")

    await bot.send_photo(
        chat_id=callback.from_user.id,
        photo=photo,
        caption="üì∏ –¢–≤–æ—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è –≥–æ—Ç–æ–≤–∞. –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –µ—ë —Å—é–¥–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.",
        reply_markup=keyboard_final
    )

    await container.user_repository.update_state(
        id=callback.from_user.id,
        state='sbp'
    )

    # –¢—É—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    # data = await state.get_data()
    # photos = data["photos"]
    # –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å: style


# --- –ö–Ω–æ–ø–∫–∏ "5 —Ñ–æ—Ç–æ / 10 —Ñ–æ—Ç–æ" ---
@router.callback_query(F.data.in_(["generate_5", "generate_10"]))
async def handle_generate_photos(callback: CallbackQuery, bot: Bot, container: Container):
    await callback.answer()
    count = "5" if callback.data == "generate_5" else "10"
    await container.user_repository.update_button(callback.from_user.id)


@router.callback_query(F.data.in_(["podderzhka"]))
async def handle_podderzhka(callback: CallbackQuery, bot: Bot, container: Container):
    await callback.answer()
    await bot.send_message(
        chat_id=callback.from_user.id,
        text=_(
            "–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å—é–¥–∞ @ilyyyyaaa"
        )
    )


@router.callback_query(F.data.in_(["sbp"]))
async def handle_podderzhka(callback: CallbackQuery, bot: Bot, container: Container):
    await callback.answer()
    await container.user_repository.update_button(callback.from_user.id)
